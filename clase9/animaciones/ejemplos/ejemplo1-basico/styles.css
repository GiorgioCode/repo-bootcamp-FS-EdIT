/* 
 * ANIMACIONES CSS BÁSICAS
 * Este archivo contiene ejemplos básicos de animaciones en CSS
 * con explicaciones detalladas de cada técnica
 */

/* Reset y estilos generales */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #f8f9fa;
    padding: 20px;
}

header {
    text-align: center;
    margin-bottom: 30px;
}

h1 {
    color: #2c3e50;
    margin-bottom: 10px;
}

.descripcion {
    color: #7f8c8d;
    font-size: 1.1rem;
}

.contenedor {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr;
    gap: 40px;
}

/* Estilos para secciones */
.seccion {
    background-color: white;
    border-radius: 8px;
    padding: 30px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 30px;
    align-items: center;
}

h2 {
    grid-column: 1 / -1;
    color: #3498db;
    margin-bottom: 20px;
    border-bottom: 2px solid #f0f0f0;
    padding-bottom: 10px;
}

h3 {
    margin-bottom: 15px;
    color: #2c3e50;
}

code {
    background-color: #f8f9fa;
    padding: 2px 5px;
    border-radius: 4px;
    font-family: monospace;
    color: #e74c3c;
}

ul {
    margin-left: 20px;
    margin-top: 10px;
}

li {
    margin-bottom: 8px;
}

/* Estilos base para las cajas de demostración */
.caja {
    width: 200px;
    height: 200px;
    background-color: #3498db;
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    cursor: pointer;
    border-radius: 8px;
    margin: 0 auto;
    font-size: 1.2rem;
}

/* Footer */
footer {
    margin-top: 50px;
    text-align: center;
    color: #7f8c8d;
    padding: 20px;
    border-top: 1px solid #e0e0e0;
}

.navegacion a {
    display: inline-block;
    margin: 20px 0;
    background-color: #3498db;
    color: white;
    padding: 10px 15px;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.3s;
}

.navegacion a:hover {
    background-color: #2980b9;
}

/* Media query para pantallas más grandes */
@media (min-width: 768px) {
    .contenedor {
        grid-template-columns: 1fr 1fr;
    }
    
    .seccion {
        grid-column: span 1;
    }
}

/*
 * ========================================================
 * 1. TRANSFORMACIONES
 * ========================================================
 */

/* 
 * Las transformaciones permiten modificar la forma, posición o tamaño de un elemento
 * sin afectar el flujo normal del documento.
 * 
 * Propiedades principales:
 * - scale(): cambia el tamaño (1 es tamaño original)
 * - rotate(): gira el elemento (en deg, grados)
 * - translate(): mueve el elemento (X, Y)
 * - skew(): inclina el elemento (en deg, grados)
 */
.transformacion {
    /* Añadimos transición para que la transformación sea suave */
    transition: transform 0.3s ease;
}

.transformacion:hover {
    /* Al pasar el ratón, aplicamos múltiples transformaciones */
    transform: scale(1.2) rotate(5deg);
    /* Podríamos combinar con más transformaciones:
       transform: scale(1.2) rotate(5deg) translateY(-10px); */
}

/*
 * ========================================================
 * 2. TRANSICIONES
 * ========================================================
 */

/* 
 * Las transiciones permiten crear cambios suaves entre estados.
 * Establecen cómo debe calcularse el valor intermedio entre
 * el valor inicial y final de la propiedad animada.
 *
 * Sintaxis completa:
 * transition: [propiedad] [duración] [función-temporización] [delay];
 */
.transicion {
    background-color: #3498db;
    /* Definimos la transición para múltiples propiedades */
    transition: background-color 0.5s ease,
                border-radius 0.8s ease-in-out,
                box-shadow 0.3s ease;
}

.transicion:hover {
    /* Al pasar el ratón, cambiamos las propiedades */
    background-color: #e74c3c;
    border-radius: 50%; /* Cambia de cuadrado a círculo */
    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
}

/*
 * ========================================================
 * 3. ANIMACIONES CON KEYFRAMES
 * ========================================================
 */

/* 
 * @keyframes permite definir los estados de la animación
 * en diferentes puntos temporales (de 0% a 100%).
 * 
 * A cada animación se le da un nombre único que se utiliza
 * para aplicarla a los elementos.
 */
@keyframes pulsar {
    0% {
        transform: scale(1);
        background-color: #3498db;
    }
    50% {
        transform: scale(1.1);
        background-color: #9b59b6;
    }
    100% {
        transform: scale(1);
        background-color: #3498db;
    }
}

.keyframe {
    /* Aplicamos la animación definida arriba */
    animation-name: pulsar;              /* Nombre de la animación */
    animation-duration: 2s;              /* Duración de cada ciclo */
    animation-timing-function: ease-in-out; /* Curva de velocidad */
    animation-iteration-count: infinite; /* Se repite indefinidamente */
    /* También podríamos escribir todo en una línea:
       animation: pulsar 2s ease-in-out infinite; */
}

/*
 * ========================================================
 * 4. ANIMACIONES COMBINADAS
 * ========================================================
 */

/* 
 * Podemos crear múltiples animaciones y aplicarlas 
 * simultáneamente a un elemento.
 */

@keyframes rotar {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

@keyframes cambiarColor {
    0% { background-color: #3498db; }
    25% { background-color: #9b59b6; }
    50% { background-color: #e74c3c; }
    75% { background-color: #f39c12; }
    100% { background-color: #3498db; }
}

@keyframes moverArriba {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
}

.combinada {
    /* Aplicamos múltiples animaciones separadas por coma */
    animation: 
        rotar 8s linear infinite,       /* Gira constantemente */
        cambiarColor 5s ease infinite,  /* Cambia colores */
        moverArriba 3s ease-in-out infinite; /* Sube y baja */
        
    /* 
     * IMPORTANTE: Cuando tenemos transformaciones en diferentes animaciones,
     * CSS las combina. Si una animación tiene 'rotate' y otra 'translateY',
     * ambas se aplican. Pero si dos animaciones modifican la misma 
     * propiedad exacta (por ejemplo, ambas con 'rotate'), una sobreescribirá
     * a la otra según el orden de declaración.
     */
}

/* 
 * Nota: Para evitar conflictos entre animaciones que modifican
 * la misma propiedad, podemos usar la propiedad transform
 * en un solo @keyframes, combinando todas las transformaciones:
 *
 * @keyframes combinado {
 *    0% { transform: rotate(0deg) translateY(0); }
 *    50% { transform: rotate(180deg) translateY(-20px); }
 *    100% { transform: rotate(360deg) translateY(0); }
 * }
 */
